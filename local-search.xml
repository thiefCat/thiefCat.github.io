<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shell</title>
    <link href="/2024/06/24/CS_Basis/Shell/"/>
    <url>/2024/06/24/CS_Basis/Shell/</url>
    
    <content type="html"><![CDATA[<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="What-is-the-shell"><a href="#What-is-the-shell" class="headerlink" title="What is the shell?"></a>What is the shell?</h3><p>A shell is a user interface that provides access to various services of an operating system. It is a command-line interface (CLI). The shell in macOS before Catalina is <strong>Bourne Again Shell (bash)</strong>. The shell allows users to execute commands, run programs, and manage system resources. While the GUI defines many use cases for interacting with the OS, to take full advantage of system tools, we must use the shell.</p><h3 id="Basic-shell-commands"><a href="#Basic-shell-commands" class="headerlink" title="Basic shell commands"></a>Basic shell commands</h3><div class="code-wrapper"><pre><code class="hljs livecodeserver">.: current <span class="hljs-built_in">directory</span>..: parent <span class="hljs-built_in">directory</span>lsmkdircd: change <span class="hljs-built_in">directory</span>pwd: print working <span class="hljs-built_in">directory</span>echo <span class="hljs-string">&quot;text&quot;</span>: prints <span class="hljs-keyword">the</span> specified <span class="hljs-keyword">text</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> terminalcat: displays <span class="hljs-keyword">the</span> contents <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> specified <span class="hljs-built_in">file</span>touch example.txt: creates <span class="hljs-keyword">a</span> <span class="hljs-built_in">file</span>grep <span class="hljs-string">&quot;Hello&quot;</span> example.txt: searches <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">string</span> “Hello” <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">file</span> named example.txt <span class="hljs-keyword">and</span> returns <span class="hljs-keyword">the</span> <span class="hljs-built_in">line</span> containing <span class="hljs-keyword">it</span></code></pre></div><h3 id="How-the-shell-executes-programs"><a href="#How-the-shell-executes-programs" class="headerlink" title="How the shell executes programs"></a>How the shell executes programs</h3><p>When a command is entered in the shell, it follows these steps to execute:</p><ol><li><strong>Parsing:</strong> The shell reads the command line input and breaks it into components. The first word is the command (program), and the following words are arguments.</li><li><strong>Command Lookup:</strong> The shell searches for the command in the directories listed in the PATH environment variable.<div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span></code></pre></div></li><li><strong>Forking:</strong> The shell creates a new process (child process) to execute the command.</li><li><strong>Return:</strong> After the child process finishes, control returns to the user.</li></ol><h3 id="Executing-programs"><a href="#Executing-programs" class="headerlink" title="Executing programs"></a>Executing programs</h3><div class="code-wrapper"><pre><code class="hljs bash">(base) % <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>/Users/.../bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></pre></div><p>The <code>echo $PATH</code> command executes the program <code>echo</code>. The shell searches for it in the directories defined in <code>$PATH</code>. To find where the <code>echo</code> program resides:</p><div class="code-wrapper"><pre><code class="hljs bash">(base) % <span class="hljs-built_in">which</span> <span class="hljs-built_in">echo</span><span class="hljs-built_in">echo</span>: shell built-in <span class="hljs-built_in">command</span></code></pre></div><p>Other examples:</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span>/bin/ls% <span class="hljs-built_in">which</span> <span class="hljs-built_in">mkdir</span>/bin/mkdir% <span class="hljs-built_in">which</span> npm/Users/.../bin/npm% <span class="hljs-built_in">which</span> python/opt/anaconda3/bin/python</code></pre></div><p>Commands like <code>ls</code> and <code>mkdir</code> reside in <code>/bin/</code>, while <code>npm</code> and <code>python</code> are installed in specific locations.</p><hr><h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h3><p>In the shell, each program has an input stream and an output stream — by default, the keyboard and terminal. We can redirect input or output using <code>&lt; file</code> or <code>&gt; file</code>.</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, World&quot;</span> &gt; output.txt</code></pre></div><ul><li><code>echo &quot;Hello, World&quot;</code>: prints text to the terminal.</li><li><code>&gt;</code>: redirects output to the file specified on its right.</li></ul><p>Result: the text “Hello, World” is written to <code>output.txt</code>.</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">cat</span> output.txtHello, World</code></pre></div><p><code>&gt;</code> overwrites a file, while <code>&gt;&gt;</code> appends to it.</p><h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>Pipes (<code>|</code>) pass the output of one command as input to another.</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">ls</span> -l | grep <span class="hljs-string">&quot;.txt&quot;</span>-rw-r--r--  1 user  staff  13 Jun 24 16:18 output.txt</code></pre></div><p>Explanation:</p><ul><li><code>ls -l</code>: lists files in long format.</li><li><code>|</code>: passes output to the next command.</li><li><code>grep &quot;.txt&quot;</code>: filters for <code>.txt</code> files.</li></ul><p>Combining redirection and pipes:</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">ls</span> -l | grep <span class="hljs-string">&quot;.txt&quot;</span> &gt; txt_files_list.txt% <span class="hljs-built_in">cat</span> txt_files_list.txt-rw-r--r--  1 user  staff  13 Jun 24 16:18 output.txt-rw-r--r--  1 user  staff   0 Jun 24 16:34 txt_files_list.txt</code></pre></div><hr><h2 id="Useful"><a href="#Useful" class="headerlink" title="Useful"></a>Useful</h2><h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><div class="code-wrapper"><pre><code class="hljs bash">bash-3.2$ <span class="hljs-built_in">alias</span> gs=<span class="hljs-string">&quot;git status&quot;</span>bash-3.2$ gsOn branch mainnothing to commit, working tree cleanbash-3.2$ git statusOn branch mainnothing to commit, working tree clean</code></pre></div><p>To make an alias persistent, include it in configuration files like <code>.bashrc</code> or <code>.zshrc</code>.</p>]]></content>
    
    
    <categories>
      
      <category>Computer Basis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My first Blog</title>
    <link href="/2024/06/23/test/"/>
    <url>/2024/06/23/test/</url>
    
    <content type="html"><![CDATA[<h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;Name&quot;</span>$ hexo new post <span class="hljs-string">&quot;topic&quot;</span> --path <span class="hljs-string">&quot;folder/topic&quot;</span></code></pre></div><h3 id="Include-image-in-a-post"><a href="#Include-image-in-a-post" class="headerlink" title="Include image in a post"></a>Include image in a post</h3><p>Move the image to the folder created automatically by Hexo, and then use the relative path to refer to the image.</p><p>Using hexo syntax, but unable to resize the image:</p><div class="code-wrapper"><pre><code class="hljs Markdown">&#123;% asset<span class="hljs-emphasis">_img sample.jpeg &#x27;This is my picture&#x27; %&#125;</span></code></pre></div><img src="/2024/06/23/test/sample.jpeg" class="" title="This is my picture"><p>Or directly use an <code>&lt;img&gt;</code> tag:</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sample.jpeg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: auto;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sample Image&quot;</span>&gt;</span></code></pre></div><img src="sample.jpeg" style="width: 300px; height: auto;" alt="Sample Image"><p>With centered alignment:</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sample.jpeg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: auto;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sample Image&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><div style="text-align: center;">  <img src="sample.jpeg" style="width: 300px; height: auto;" alt="Sample Image"></div><hr><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo g</code></pre></div><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo s</code></pre></div><h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo d</code></pre></div><h3 id="Generate-and-Deploy"><a href="#Generate-and-Deploy" class="headerlink" title="Generate and Deploy"></a>Generate and Deploy</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo g -d</code></pre></div><h2 id="Create-a-new-page"><a href="#Create-a-new-page" class="headerlink" title="Create a new page"></a>Create a new page</h2><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new page <span class="hljs-string">&quot;name&quot;</span></code></pre></div><h3 id="Creating-a-new-navigation-bar"><a href="#Creating-a-new-navigation-bar" class="headerlink" title="Creating a new navigation bar"></a>Creating a new navigation bar</h3><ol><li>Create a new <code>.ejs</code> file in <code>/themes/fluid/layout/</code></li><li>Add page attributes in <code>_config.fluid.yml</code>, and include a new menu item inside <code>navbar.menu</code></li><li>Modify <code>/themes/fluid/languages/en.yml</code> to add titles and subtitles</li></ol>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
