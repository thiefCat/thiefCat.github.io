<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shell - How Shell Works</title>
    <link href="/2024/06/24/CS_Basis/Shell2/"/>
    <url>/2024/06/24/CS_Basis/Shell2/</url>
    
    <content type="html"><![CDATA[<h3 id="Configuration-file"><a href="#Configuration-file" class="headerlink" title="Configuration file"></a>Configuration file</h3><ul><li><code>~/.zshrc</code>: The primary config file for zsh</li><li><code>~/.bashrc</code>: The primary config file for bash (on linux systems)<br>The shell automatically reads (it “sources”) this file every time you open a new terminal. The source command is a built-in shell command that executes a script in the current shell session. For example, if the script exports a variable (e.g., export MY_VAR&#x3D;”hello”), that variable becomes part of your current shell’s environment.</li></ul><h3 id="How-the-shell-executes-programs"><a href="#How-the-shell-executes-programs" class="headerlink" title="How the shell executes programs"></a>How the shell executes programs</h3><p>When a command is entered in the shell, it follows these steps to execute:</p><ol><li><strong>Parsing:</strong> The shell reads the command line input and breaks it into components. <strong>The first word is the command (program), and the following words are arguments.</strong></li><li><strong>Command Lookup:</strong> The shell searches for the command in the directories listed in the PATH environment variable.<div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span></code></pre></div></li><li><strong>Forking:</strong> The shell creates a new process (child process) to execute the command.</li><li><strong>Return:</strong> After the child process finishes, control returns to the user.</li></ol><h3 id="Executing-programs"><a href="#Executing-programs" class="headerlink" title="Executing programs"></a>Executing programs</h3><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>/Users/.../bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></pre></div><p>The <code>echo $PATH</code> command executes the program <code>echo</code>. The shell searches for it in the directories defined in <code>$PATH</code>. To find where the <code>echo</code> program resides:</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">which</span> <span class="hljs-built_in">echo</span><span class="hljs-built_in">echo</span>: shell built-in <span class="hljs-built_in">command</span></code></pre></div><p>Other examples:</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span>/bin/ls% <span class="hljs-built_in">which</span> <span class="hljs-built_in">mkdir</span>/bin/mkdir% <span class="hljs-built_in">which</span> npm/Users/.../bin/npm% <span class="hljs-built_in">which</span> python/opt/anaconda3/bin/python</code></pre></div><p>Check where is my python:</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">There are two python3 installed on my commputer</span><span class="hljs-meta prompt_">% </span><span class="language-bash"><span class="hljs-built_in">which</span> -a python3</span>/opt/miniconda3/bin/python3/usr/bin/python3<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">But this <span class="hljs-built_in">command</span> only <span class="hljs-built_in">return</span> one</span><span class="hljs-meta prompt_">% </span><span class="language-bash"><span class="hljs-built_in">which</span> python3</span>/opt/miniconda3/bin/python3</code></pre></div><p><strong>When you have multiple versions of the same command, The shell executes the first one it finds, searching the directories in your <code>$PATH</code> from left to right.</strong></p><h3 id="Types-of-Commands"><a href="#Types-of-Commands" class="headerlink" title="Types of Commands"></a>Types of Commands</h3><ul><li><p>Built-in commands<br>A built-in command is a command that is part of the shell program itself. Examples: <code>cd, echo, exit, export, alias, pwd</code>.</p>  <div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">% </span><span class="language-bash"><span class="hljs-built_in">type</span> <span class="hljs-built_in">pwd</span></span>     pwd is a shell builtin</code></pre></div></li><li><p>External Commands<br>An external command is a separate program that exists as a file on your system. Examples: <code>ls, grep, git, python, node</code>.</p>  <div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">% </span><span class="language-bash"><span class="hljs-built_in">type</span> <span class="hljs-built_in">ls</span></span>ls is /bin/ls</code></pre></div></li></ul><h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><h3 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h3><p>In the shell, each program has an input stream and an output stream — by default, the keyboard and terminal. We can redirect input or output using <code>&lt; file</code> or <code>&gt; file</code>.</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, World&quot;</span> &gt; output.txt</code></pre></div><ul><li><code>echo &quot;Hello, World&quot;</code>: prints text to the terminal.</li><li><code>&gt;</code>: redirects output to the file specified on its right.</li></ul><p>Result: the text “Hello, World” is written to <code>output.txt</code>. <code>&gt;</code> overwrites a file, while <code>&gt;&gt;</code> appends to it.</p><h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>Pipes (<code>|</code>) pass the output of one command as input to another.</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">ls</span> -l | grep <span class="hljs-string">&quot;.txt&quot;</span>-rw-r--r--  1 user  staff  13 Jun 24 16:18 output.txt</code></pre></div><p>Explanation:</p><ul><li><code>ls -l</code>: lists files in long format.</li><li><code>|</code>: passes output to the next command.</li><li><code>grep &quot;.txt&quot;</code>: filters for <code>.txt</code> files.</li></ul><p>Combining redirection and pipes:</p><div class="code-wrapper"><pre><code class="hljs bash">% <span class="hljs-built_in">ls</span> -l | grep <span class="hljs-string">&quot;.txt&quot;</span> &gt; txt_files_list.txt% <span class="hljs-built_in">cat</span> txt_files_list.txt-rw-r--r--  1 user  staff  13 Jun 24 16:18 output.txt-rw-r--r--  1 user  staff   0 Jun 24 16:34 txt_files_list.txt</code></pre></div><hr><h2 id="Useful"><a href="#Useful" class="headerlink" title="Useful"></a>Useful</h2><h3 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h3><div class="code-wrapper"><pre><code class="hljs bash">bash-3.2$ <span class="hljs-built_in">alias</span> gs=<span class="hljs-string">&quot;git status&quot;</span>bash-3.2$ gsOn branch mainnothing to commit, working tree cleanbash-3.2$ git statusOn branch mainnothing to commit, working tree clean</code></pre></div><p>To make an alias persistent, include it in configuration files like <code>.bashrc</code> or <code>.zshrc</code>.</p>]]></content>
    
    
    <categories>
      
      <category>Computer Basis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell - Basic Syntax</title>
    <link href="/2024/06/24/CS_Basis/Shell1/"/>
    <url>/2024/06/24/CS_Basis/Shell1/</url>
    
    <content type="html"><![CDATA[<h3 id="What-is-the-shell"><a href="#What-is-the-shell" class="headerlink" title="What is the shell?"></a>What is the shell?</h3><p><strong>A shell is a program that takes your commands, interprets them, and tells the operating system what to do.</strong> It is a command-line interface (CLI). The shell in macOS before Catalina is bash (Bourne Again Shell) and currently it’s Zsh (Z Shell). The shell allows users to execute commands, run programs, and manage system resources. While the GUI defines many use cases for interacting with the OS, to take full advantage of system tools, we must use the shell.</p><h3 id="Basic-shell-commands"><a href="#Basic-shell-commands" class="headerlink" title="Basic shell commands"></a>Basic shell commands</h3><div class="code-wrapper"><pre><code class="hljs shell">. # current directory.. # parent directorylsmkdircd # change directorypwd # print working directoryecho &quot;text&quot; # prints the specified text to the terminalcat # displays the contents of the specified filetouch example.txt # creates a filegrep &quot;Hello&quot; example.txt # searches for the string “Hello” in a file named example.txt and returns the line containing itexport #</code></pre></div><h3 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h3><p>Every shell script starts with a shebang line:</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span></code></pre></div><p>This tells the system to run the script with Bash.</p><ul><li>Define variables</li></ul><div class="code-wrapper"><pre><code class="hljs shell">name=&quot;Alice&quot; # no space around &quot;=&quot;echo $nameecho &quot;Hello, $&#123;name&#125;!&quot;</code></pre></div><p>In this example, <code>name</code> is variable name, <code>$name</code> represents getting the value of the variable.</p><ul><li>Command substitution</li></ul><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">% </span><span class="language-bash"><span class="hljs-built_in">date</span></span>Fri Oct 24 01:19:10 PDT 2025today=$(date) # $(date) runs the date command first, and replace it with its outputecho &quot;Today is $today&quot;</code></pre></div><p><code>$()</code> means running a command and store its output.</p><ul><li>If statements</li></ul><div class="code-wrapper"><pre><code class="hljs shell">if [ $age -gt 18 ]; then    echo &quot;Adult&quot;else    echo &quot;Minor&quot;fi</code></pre></div><p>Common operators: <code>-eq, -ne, -gt, -ge, -lt, -le</code>.</p><ul><li>For loop</li></ul><div class="code-wrapper"><pre><code class="hljs shell">for var in item1 item2 item3; do  echo &quot;$var&quot;done</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">for f in *.txt; do # get all *.txt in the current directory  echo &quot;file: $f&quot;done</code></pre></div><ul><li>While loop</li></ul><div class="code-wrapper"><pre><code class="hljs shell">count=1while [ $count -le 5 ]; do  echo &quot;Count $count&quot;  ((count++))done</code></pre></div><ul><li>Arithmetic<br><code>(( ))</code> is used for arithmetic evaluation (like addition, subtraction, comparisons, and increments) in Bash.</li></ul><div class="code-wrapper"><pre><code class="hljs shell">((a = 5 + 3))echo $a   # 8((a++))((c += 5))((d *= 2))</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">a=5b=3if ((a &gt; b)); then  echo &quot;a is greater&quot;fifor ((i=1; i&lt;=5; i++)); do  echo &quot;Number $i&quot;done</code></pre></div><ul><li>Functions</li></ul><div class="code-wrapper"><pre><code class="hljs shell">greet() &#123;    echo &quot;Hello, $1&quot;&#125;greet &quot;Alice&quot;</code></pre></div><p><code>$1</code> refers to the first argument passed to the function.</p><ul><li>Exit Status<br>Every command in Linux returns an exit status. 0 means success, and non-zero means failure. <code>$?</code> is a special variable that stores the exit code of the most recent command.</li></ul><div class="code-wrapper"><pre><code class="hljs shell">ls /etcecho $?   # 0 = successls /no/such/fileecho $?   # non-zero = error</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">if ls /no/such/file; then # if the ls command succeed, then print &quot;Command succeeded&quot;  echo &quot;Command succeeded&quot;else  echo &quot;Command failed&quot;fi</code></pre></div><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><p>Tests are used in conditional statements.</p><ul><li><code>-f file</code>, File exists and is a regular file</li></ul><div class="code-wrapper"><pre><code class="hljs shell">if [ -f &quot;config.txt&quot; ]; then  echo &quot;Config file found&quot;else  echo &quot;No config file&quot;fi</code></pre></div><ul><li><code>-d file</code>, file is a directory</li><li><code>-z &quot;$str&quot;</code>, string is empty</li><li><code>-n &quot;$str&quot;</code>, string is not empty</li><li><code>&quot;$a&quot; != &quot;$b&quot;</code>, strings are not equal</li></ul><h3 id="Special-Parameters"><a href="#Special-Parameters" class="headerlink" title="Special Parameters"></a>Special Parameters</h3><ul><li><code>$0</code>, name of the current script</li><li><code>$1</code>, first parameter</li><li><code>$#</code>, number of parameters</li><li><code>$$</code>, current script’s process ID</li><li><code>$?</code>, exit status of the last command</li><li><code>$SHELL</code>, current shell path</li><li><code>$PATH</code>, directories to search for executables</li></ul>]]></content>
    
    
    <categories>
      
      <category>Computer Basis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My first Blog</title>
    <link href="/2024/06/23/test/"/>
    <url>/2024/06/23/test/</url>
    
    <content type="html"><![CDATA[<h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;Name&quot;</span>$ hexo new post <span class="hljs-string">&quot;topic&quot;</span> --path <span class="hljs-string">&quot;folder/topic&quot;</span></code></pre></div><h3 id="Include-image-in-a-post"><a href="#Include-image-in-a-post" class="headerlink" title="Include image in a post"></a>Include image in a post</h3><p>Move the image to the folder created automatically by Hexo, and then use the relative path to refer to the image.</p><p>Using hexo syntax, but unable to resize the image:</p><div class="code-wrapper"><pre><code class="hljs Markdown">&#123;% asset<span class="hljs-emphasis">_img sample.jpeg &#x27;This is my picture&#x27; %&#125;</span></code></pre></div><img src="/2024/06/23/test/sample.jpeg" class="" title="This is my picture"><p>Or directly use an <code>&lt;img&gt;</code> tag:</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sample.jpeg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: auto;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sample Image&quot;</span>&gt;</span></code></pre></div><img src="sample.jpeg" style="width: 300px; height: auto;" alt="Sample Image"><p>With centered alignment:</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;sample.jpeg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: auto;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sample Image&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><div style="text-align: center;">  <img src="sample.jpeg" style="width: 300px; height: auto;" alt="Sample Image"></div><hr><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo g</code></pre></div><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo s</code></pre></div><h3 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo d</code></pre></div><h3 id="Generate-and-Deploy"><a href="#Generate-and-Deploy" class="headerlink" title="Generate and Deploy"></a>Generate and Deploy</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo g -d</code></pre></div><h2 id="Create-a-new-page"><a href="#Create-a-new-page" class="headerlink" title="Create a new page"></a>Create a new page</h2><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new page <span class="hljs-string">&quot;name&quot;</span></code></pre></div><h3 id="Creating-a-new-navigation-bar"><a href="#Creating-a-new-navigation-bar" class="headerlink" title="Creating a new navigation bar"></a>Creating a new navigation bar</h3><ol><li>Create a new <code>.ejs</code> file in <code>/themes/fluid/layout/</code></li><li>Add page attributes in <code>_config.fluid.yml</code>, and include a new menu item inside <code>navbar.menu</code></li><li>Modify <code>/themes/fluid/languages/en.yml</code> to add titles and subtitles</li></ol>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
